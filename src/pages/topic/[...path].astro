---
import Layout from "../../layouts/Layout.astro";
import ArticleComponent from "../../components/Article.astro";
import type { PagedArticleList } from "../../types/article";
import Pager from "../../components/Pager.astro";
import { CollectionEntry, getCollection } from "astro:content";

export async function getStaticPaths() {
   const fetchedArticles = await getCollection("blog", ({ data }) => {
      return data.draft !== true;
   });
   fetchedArticles.sort((a, b) => (a.data.dateTime < b.data.dateTime ? 1 : -1));

   const themeMap = fetchedArticles.reduce((acc, e) => {
      const theme = e.data.theme;
      return acc.set(theme, (acc.get(theme) || []).concat(e));
   }, new Map<string, CollectionEntry<"blog">[]>());

   let staticPaths: {
      params: { path: string };
      props: {
         articles: CollectionEntry<"blog">[];
         page: number;
         last: boolean;
         theme: string;
      };
   }[] = [];
   [...themeMap.entries()].forEach((theme) => {
      const pagedArticles: PagedArticleList = [];
      let pageCount = -1;
      let articleCount = 0;
      for (const item of theme[1]) {
         if (articleCount % 10 == 0) {
            pageCount++;
            pagedArticles.push({ page: pageCount, articles: [] });
         }
         pagedArticles[pageCount]!.articles.push(item);
         articleCount++;
      }

      staticPaths = staticPaths.concat(
         pagedArticles.map((articlePage) => ({
            params: { path: `${theme[0]}/${articlePage.page}` },
            props: {
               articles: articlePage.articles,
               page: articlePage.page,
               last: articlePage.page == pageCount,
               theme: theme[0],
            },
         })).concat([{
            params: { path: `${theme[0]}` },
            props: {
               articles: pagedArticles[0]!.articles,
               page: 0,
               last: 0 == pageCount,
               theme: theme[0],
            },

         }])
      );
   });

   console.log(staticPaths);
   return staticPaths;
}

interface Props {
   articles: CollectionEntry<"blog">[];
   page: number;
   last: boolean;
   theme?: string;
}

const { articles, page, last, theme } = Astro.props;
---

<Layout>
   <section class="article-list">
      {
         articles.map((article) => (
            <ArticleComponent item={article} titleLink={true} />
         ))
      }
   </section>
   <Pager
      firstPage={page === 0}
      lastPage={last}
      nextUrl={`/topic/${theme}/${page + 1}`}
      nextTitle="Older posts"
      prevUrl={`/topic/${theme}/${page - 1}`}
      prevTitle="Newer posts"
   />
</Layout>

<style lang="scss">
   section.article-list {
      display: flex;
      flex-direction: column;
      margin: 0;
      padding: 0;
      gap: 4rem;
      container-type: inline-size;
   }
</style>
